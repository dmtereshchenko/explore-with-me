{
  "info": {
    "_postman_id": "72b43a02-6074-4848-b2d8-439f179ff877",
    "name": "feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Validation",
      "item": [
        {
          "name": "Comment",
          "item": [
            {
              "name": "String length restrictions",
              "item": [
                {
                  "name": "Добавление комментария с пустым текстом",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        pm.collectionVariables.set('cid', category.id)",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        comment = rnd.getComment();",
                          "        comment.text = \"\";",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Изменение комментария с пустым текстом",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                          "        comment.text = \"\";",
                          "        pm.collectionVariables.set('cid', comment.id)",
                          "        pm.request.body.update({",
                          "            mode: 'raw',",
                          "            raw: comment,",
                          "            options: { raw: { language: 'json' } }",
                          "        });",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{{request_body}}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments",
                        ":commentId"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        },
                        {
                          "key": "commentId",
                          "value": "{{cid}}",
                          "description": "(Required) id текущего комментария"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Добавление комментария с text.length < 3",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        pm.collectionVariables.set('cid', category.id)",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        comment = rnd.getComment();",
                          "        comment.text = rnd.getWord(2);",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Добавление комментария с text.length > 10000",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        pm.collectionVariables.set('cid', category.id)",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        comment = rnd.getComment();",
                          "        comment.text = rnd.getWord(10001);",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Добавление комментария с text.length == 10000",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        pm.collectionVariables.set('cid', category.id)",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        comment = rnd.getComment();",
                          "        comment.text = rnd.getWord(10000);",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
                          "    pm.response.to.have.status(201);  ",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});",
                          "",
                          "const source = JSON.parse(pm.request.body.raw);",
                          "const target = pm.response.json();",
                          "",
                          "pm.test(\"Комментарий должен содержать поля: id, author, event, text, created, updated\", function () {",
                          "    pm.expect(target).to.have.property('id');",
                          "    pm.expect(target).to.have.property('author');",
                          "    pm.expect(target).to.have.property('event');",
                          "    pm.expect(target).to.have.property('text');",
                          "    pm.expect(target).to.have.property('created');",
                          "    pm.expect(target).to.have.property('updated');",
                          "});",
                          "",
                          "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                          "    pm.expect(target.id).to.not.to.be.null;",
                          "    pm.expect(target.text).equal(source.text, 'Текст должен соответствовать тексту в запросе');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Добавление комментария с text.length == 3",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        pm.collectionVariables.set('cid', category.id)",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        comment = rnd.getComment();",
                          "        comment.text = rnd.getWord(3);",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
                          "    pm.response.to.have.status(201);  ",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});",
                          "",
                          "const source = JSON.parse(pm.request.body.raw);",
                          "const target = pm.response.json();",
                          "",
                          "pm.test(\"Комментарий должен содержать поля: id, author, event, text, created, updated\", function () {",
                          "    pm.expect(target).to.have.property('id');",
                          "    pm.expect(target).to.have.property('author');",
                          "    pm.expect(target).to.have.property('event');",
                          "    pm.expect(target).to.have.property('text');",
                          "    pm.expect(target).to.have.property('created');",
                          "    pm.expect(target).to.have.property('updated');",
                          "});",
                          "",
                          "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                          "    pm.expect(target.id).to.not.to.be.null;",
                          "    pm.expect(target.text).equal(source.text, 'Текст должен соответствовать тексту в запросе');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Изменение комментария с text.length < 3",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                          "        comment.text = comment.text = rnd.getWord(2);",
                          "        pm.collectionVariables.set('cid', comment.id)",
                          "        pm.request.body.update({",
                          "            mode: 'raw',",
                          "            raw: comment,",
                          "            options: { raw: { language: 'json' } }",
                          "        });",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{{request_body}}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments",
                        ":commentId"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        },
                        {
                          "key": "commentId",
                          "value": "{{cid}}",
                          "description": "(Required) id текущего комментария"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Изменение комментария с text.length == 3",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                          "        comment.text = rnd.getWord(3);",
                          "        pm.collectionVariables.set('cid', comment.id)",
                          "        pm.request.body.update({",
                          "            mode: 'raw',",
                          "            raw: comment,",
                          "            options: { raw: { language: 'json' } }",
                          "        });",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.have.status(200);  ",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{{request_body}}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments",
                        ":commentId"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        },
                        {
                          "key": "commentId",
                          "value": "{{cid}}",
                          "description": "(Required) id текущего комментария"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Изменение комментария с text.length == 10000",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                          "        comment.text = rnd.getWord(10000);",
                          "        pm.collectionVariables.set('cid', comment.id)",
                          "        pm.request.body.update({",
                          "            mode: 'raw',",
                          "            raw: comment,",
                          "            options: { raw: { language: 'json' } }",
                          "        });",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.have.status(200);  ",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{{request_body}}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments",
                        ":commentId"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        },
                        {
                          "key": "commentId",
                          "value": "{{cid}}",
                          "description": "(Required) id текущего комментария"
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Изменение комментария с text.length > 10000",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                          "        comment.text = comment.text = rnd.getWord(10001);",
                          "        pm.collectionVariables.set('cid', comment.id)",
                          "        pm.request.body.update({",
                          "            mode: 'raw',",
                          "            raw: comment,",
                          "            options: { raw: { language: 'json' } }",
                          "        });",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 400\", function () {",
                          "    pm.response.to.have.status(400);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{{request_body}}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments",
                        ":commentId"
                      ],
                      "query": [
                        {
                          "key": "eventId",
                          "value": "0",
                          "description": "(Required) id события",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        },
                        {
                          "key": "commentId",
                          "value": "{{cid}}",
                          "description": "(Required) id текущего комментария"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Default values check",
              "item": [
                {
                  "name": "Проверка на значения по-умолчанию from и size(comment)",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {\r",
                          "    const api = new API(pm);\r",
                          "    const rnd = new RandomUtils();\r",
                          "\r",
                          "    //let user, category, event, commentArr;\r",
                          "    try {\r",
                          "        user = await api.addUser(rnd.getUser());\r",
                          "        category = await api.addCategory(rnd.getCategory());\r",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                          "        event = await api.publishEvent(event.id);\r",
                          "        comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
                          "        commentArr = Array.from({length:11}, () => rnd.getComment());\r",
                          "        for (let i = 0; i < 11; i++){\r",
                          "            await api.addComment(user.id, event.id, commentArr[i]);\r",
                          "        }\r",
                          "        pm.sendRequest({\r",
                          "            url : \"http://localhost:8080/admin/comments?from=0\",\r",
                          "            method : \"GET\",\r",
                          "            header: { \"Content-Type\": \"application/json\" }\r",
                          "        }, (error, response) => {pm.collectionVariables.set('source', response.json())});\r",
                          "    } catch(err) {\r",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                          "    }\r",
                          "};\r",
                          "\r",
                          "const interval = setInterval(() => {}, 1000);\r",
                          "\r",
                          "setTimeout(async () => \r",
                          "    {\r",
                          "        try {\r",
                          "            // выполняем наш скрипт\r",
                          "            await main();\r",
                          "        } catch (e) {\r",
                          "            console.error(e);\r",
                          "        } finally {\r",
                          "            clearInterval(interval);\r",
                          "        }\r",
                          "    },  \r",
                          "    100 \r",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                          "    pm.response.to.be.ok;    \r",
                          "    pm.response.to.be.withBody;\r",
                          "    pm.response.to.be.json;\r",
                          "});\r",
                          "\r",
                          "const target = pm.response.json();\r",
                          "const source = pm.collectionVariables.get('source');\r",
                          "\r",
                          "pm.test(\"Значение from по-умолчанию должно быть равным 0\", function () {\r",
                          "    pm.expect(target[0].id).to.be.equal(source[0].id, 'Запросы с from=0 и без него должны начинаться с одного и того же события');\r",
                          "});\r",
                          "\r",
                          "pm.test(\"Значение size по-умолчанию должно быть равным 10\", function () {\r",
                          "    pm.expect(target.length).to.be.equal(10);\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/admin/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "admin",
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "users",
                          "value": "0",
                          "description": "список id пользователей, чьи события нужно найти",
                          "disabled": true
                        },
                        {
                          "key": "states",
                          "value": "PUBLISHED",
                          "description": "список состояний в которых находятся искомые события",
                          "disabled": true
                        },
                        {
                          "key": "categories",
                          "value": "0",
                          "description": "список id категорий в которых будет вестись поиск",
                          "disabled": true
                        },
                        {
                          "key": "rangeStart",
                          "value": "2022-01-06%2013%3A30%3A38",
                          "description": "дата и время не раньше которых должно произойти событие",
                          "disabled": true
                        },
                        {
                          "key": "rangeEnd",
                          "value": "2097-09-06%2013%3A30%3A38",
                          "description": "дата и время не позже которых должно произойти событие",
                          "disabled": true
                        },
                        {
                          "key": "from",
                          "value": "0",
                          "description": "количество событий, которые нужно пропустить для формирования текущего набора",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "1000",
                          "description": "количество событий в наборе",
                          "disabled": true
                        }
                      ]
                    },
                    "description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Misc tests",
              "item": [
                {
                  "name": "Добавление комментария несуществующим пользователем",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {\r",
                          "    const api = new API(pm);\r",
                          "    const rnd = new RandomUtils();\r",
                          "\r",
                          "    let comment;\r",
                          "    try {\r",
                          "        const user = await api.addUser(rnd.getUser());\r",
                          "        pm.collectionVariables.set('uid', user.id)\r",
                          "        const category = await api.addCategory(rnd.getCategory());\r",
                          "        pm.collectionVariables.set('cid', category.id)\r",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                          "        event = await api.publishEvent(event.id);\r",
                          "        pm.collectionVariables.set(\"eid\", event.id)\r",
                          "        user.id = 0;\r",
                          "        pm.collectionVariables.set('uid', user.id)\r",
                          "        comment = rnd.getComment();\r",
                          "    } catch(err) {\r",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                          "    }\r",
                          "\r",
                          "    pm.request.body.update({\r",
                          "        mode: 'raw',\r",
                          "        raw: JSON.stringify(comment),\r",
                          "        options: { raw: { language: 'json' } }\r",
                          "    });\r",
                          "};\r",
                          "\r",
                          "const interval = setInterval(() => {}, 1000);\r",
                          "\r",
                          "setTimeout(async () => \r",
                          "    {\r",
                          "        try {\r",
                          "            await main();\r",
                          "        } catch (e) {\r",
                          "            console.error(e);\r",
                          "        } finally {\r",
                          "            clearInterval(interval);\r",
                          "        }\r",
                          "    },  \r",
                          "    100 \r",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                          "    pm.response.to.have.status(404);\r",
                          "    pm.response.to.be.withBody;\r",
                          "    pm.response.to.be.json;\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments"
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        }
                      ]
                    },
                    "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
                  },
                  "response": []
                },
                {
                  "name": "Добавление комментария к несуществующему событию",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {\r",
                          "    const api = new API(pm);\r",
                          "    const rnd = new RandomUtils();\r",
                          "\r",
                          "    let comment;\r",
                          "    try {\r",
                          "        const user = await api.addUser(rnd.getUser());\r",
                          "        pm.collectionVariables.set('uid', user.id)\r",
                          "        const category = await api.addCategory(rnd.getCategory());\r",
                          "        pm.collectionVariables.set('cid', category.id)\r",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                          "        event = await api.publishEvent(event.id);\r",
                          "        event.id = 0;\r",
                          "        pm.collectionVariables.set(\"eid\", event.id)\r",
                          "        comment = rnd.getComment();\r",
                          "    } catch(err) {\r",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                          "    }\r",
                          "\r",
                          "    pm.request.body.update({\r",
                          "        mode: 'raw',\r",
                          "        raw: JSON.stringify(comment),\r",
                          "        options: { raw: { language: 'json' } }\r",
                          "    });\r",
                          "};\r",
                          "\r",
                          "const interval = setInterval(() => {}, 1000);\r",
                          "\r",
                          "setTimeout(async () => \r",
                          "    {\r",
                          "        try {\r",
                          "            await main();\r",
                          "        } catch (e) {\r",
                          "            console.error(e);\r",
                          "        } finally {\r",
                          "            clearInterval(interval);\r",
                          "        }\r",
                          "    },  \r",
                          "    100 \r",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
                          "    pm.response.to.have.status(404);\r",
                          "    pm.response.to.be.withBody;\r",
                          "    pm.response.to.be.json;\r",
                          "});\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments"
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}",
                          "description": "(Required) id текущего пользователя"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}",
                          "description": "(Required) id текущего события"
                        }
                      ]
                    },
                    "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Required params in body",
              "item": [
                {
                  "name": "Добавление нового комментария без текста",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        pm.collectionVariables.set('uid', user.id)",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        pm.collectionVariables.set(\"eid\", event.id)",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {",
                          "    pm.response.to.be.badRequest;    ",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "users",
                        ":userId",
                        "events",
                        ":eventId",
                        "comments"
                      ],
                      "variable": [
                        {
                          "key": "userId",
                          "value": "{{uid}}"
                        },
                        {
                          "key": "eventId",
                          "value": "{{eid}}"
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            },
            {
              "name": "Unrequired query params",
              "item": [
                {
                  "name": "Получение комментариев пользователем без нескольких Query params",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        const comment = rnd.getComment();",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.ok;    ",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "0",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "0",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Получение комментариев администратором без нескольких Query params",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        const comment = rnd.getComment();",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.ok;    ",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/admin/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "admin",
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "from",
                          "value": "0",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "0",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Получение комментариев администратором с возможностью фильтрации без query params",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                          "        pm.request.removeQueryParams(['userIds', 'rangeEnd']);",
                          "        pm.request.addQueryParams(['userIds=' + user.id, 'rangeEnd=' + rnd.getFutureDateTime()]);",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.ok;    ",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/admin/comments",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "admin",
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "eventIds",
                          "value": "null",
                          "disabled": true
                        },
                        {
                          "key": "userIds",
                          "value": "null",
                          "disabled": true
                        },
                        {
                          "key": "rangeStart",
                          "value": "2022-01-06%2013%3A30%3A38",
                          "disabled": true
                        },
                        {
                          "key": "rangeEnd",
                          "value": "2097-09-06%2013%3A30%3A38",
                          "disabled": true
                        },
                        {
                          "key": "from",
                          "value": "0",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "0",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "name": "Получение комментариев пользователем с возможностью фильтрации без query params",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "exec": [
                          "const main = async () => {",
                          "    const api = new API(pm);",
                          "    const rnd = new RandomUtils();",
                          "",
                          "    let comment;",
                          "    try {",
                          "        const user = await api.addUser(rnd.getUser());",
                          "        const category = await api.addCategory(rnd.getCategory());",
                          "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                          "        event = await api.publishEvent(event.id);",
                          "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                          "        pm.request.removeQueryParams(['eventIds']);",
                          "        pm.request.addQueryParams(['eventIds=' + event.id]);",
                          "    } catch(err) {",
                          "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                          "    }",
                          "",
                          "    pm.request.body.update({",
                          "        mode: 'raw',",
                          "        raw: JSON.stringify(comment),",
                          "        options: { raw: { language: 'json' } }",
                          "    });",
                          "};",
                          "",
                          "const interval = setInterval(() => {}, 1000);",
                          "",
                          "setTimeout(async () => ",
                          "    {",
                          "        try {",
                          "            await main();",
                          "        } catch (e) {",
                          "            console.error(e);",
                          "        } finally {",
                          "            clearInterval(interval);",
                          "        }",
                          "    },  ",
                          "    100 ",
                          ");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                          "    pm.response.to.be.ok;    ",
                          "    pm.response.to.be.withBody;",
                          "    pm.response.to.be.json;",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "type": "default"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "default"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/comments?rangeStart=2022-01-06%2013%3A30%3A38",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "comments"
                      ],
                      "query": [
                        {
                          "key": "eventIds",
                          "value": "null",
                          "disabled": true
                        },
                        {
                          "key": "userIds",
                          "value": "null",
                          "disabled": true
                        },
                        {
                          "key": "rangeStart",
                          "value": "2022-01-06%2013%3A30%3A38"
                        },
                        {
                          "key": "rangeEnd",
                          "value": "2097-09-06%2013%3A30%3A38",
                          "disabled": true
                        },
                        {
                          "key": "from",
                          "value": "0",
                          "disabled": true
                        },
                        {
                          "key": "size",
                          "value": "0",
                          "disabled": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "409 Conflict",
      "item": [
        {
          "name": "Удаление комментария другим пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id);\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        pm.collectionVariables.set(\"eid\", event.id);\r",
                  "        const comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"uid\", 108923)\r",
                  "        pm.collectionVariables.set(\"cid\", comment.id);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(409);\r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            },
            "description": "Обратите внимание: с категорий не должно быть связано ни одного события."
          },
          "response": []
        },
        {
          "name": "Добавление нового комментария к неопубликованному событию",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    let comment;",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set('uid', user.id)",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        pm.collectionVariables.set('cid', category.id)",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "        comment = rnd.getComment();",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "",
                  "    pm.request.body.update({",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify(comment),",
                  "        options: { raw: { language: 'json' } }",
                  "    });",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(409);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "default"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "default"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "0",
                  "description": "(Required) id события",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}",
                  "description": "(Required) id текущего пользователя"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}",
                  "description": "(Required) id текущего события"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Event",
      "item": [
        {
          "name": "Поиск событий",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
                  "\r",
                  "        pm.request.removeQueryParams(['users', 'categories']);\r",
                  "        pm.request.addQueryParams([`users=` + user.id, 'categories=' + category.id]);\r",
                  "        pm.collectionVariables.set('response', event);\r",
                  "        pm.collectionVariables.set('responseComment', comment);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const sourceComment = pm.collectionVariables.get('responseComment');\r",
                  "\r",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, comments\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('views');\r",
                  "pm.expect(target).to.have.property('confirmedRequests');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('publishedOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "pm.expect(target).to.have.property('comments');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать искомому событию');\r",
                  "    pm.expect(source.category.id).equal(target.category.id, 'Идентификатор категории должен соответствовать искомой категории');\r",
                  "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость посещения события должна соответствовать искомому событию');\r",
                  "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате искомого события');\r",
                  "    pm.expect(source.description).equal(target.description, 'Описание события должно соответствовать искомому событию');\r",
                  "    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать искомому событию');\r",
                  "    pm.expect(source.participantLimit.toString()).equal(target.participantLimit.toString(), 'Число участников события должно соответствовать искомому событию');\r",
                  "    pm.expect(sourceComment.text).equal(target.comments[0].text, 'Текст комментария должен соответствовать тексту с указанным идентификатором');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/events?users=0&states=PUBLISHED&categories=0&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events"
              ],
              "query": [
                {
                  "key": "users",
                  "value": "0",
                  "description": "список id пользователей, чьи события нужно найти"
                },
                {
                  "key": "states",
                  "value": "PUBLISHED",
                  "description": "список состояний в которых находятся искомые события"
                },
                {
                  "key": "categories",
                  "value": "0",
                  "description": "список id категорий в которых будет вестись поиск"
                },
                {
                  "key": "rangeStart",
                  "value": "2022-01-06%2013%3A30%3A38",
                  "description": "дата и время не раньше которых должно произойти событие"
                },
                {
                  "key": "rangeEnd",
                  "value": "2097-09-06%2013%3A30%3A38",
                  "description": "дата и время не позже которых должно произойти событие"
                },
                {
                  "key": "from",
                  "value": "0",
                  "description": "количество событий, которые нужно пропустить для формирования текущего набора"
                },
                {
                  "key": "size",
                  "value": "1000",
                  "description": "количество событий в наборе"
                }
              ]
            },
            "description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
          },
          "response": []
        },
        {
          "name": "Получение событий с возможностью фильтрации",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
                  "        pm.request.removeQueryParams(['text', 'categories', 'paid']);\r",
                  "        pm.request.addQueryParams([`text=` + event.annotation, 'categories=' + category.id, 'paid=' + event.paid]);\r",
                  "        pm.collectionVariables.set('response', event);\r",
                  "        pm.collectionVariables.set('responseComment', comment);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const sourceComment = pm.collectionVariables.get('responseComment');\r",
                  "const target = pm.response.json()[0];\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, comments\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('views');\r",
                  "pm.expect(target).to.have.property('confirmedRequests');\r",
                  "pm.expect(target).to.have.property('comments');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать аннотации события с указанным идентификатором');\r",
                  "    pm.expect(source.category.id).equal(target.category.id, 'Категория события должна соответствовать категории события с указанным идентификатором');\r",
                  "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать стоимости события с указанным идентификатором');\r",
                  "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате проведения события с указанным идентификатором');\r",
                  "    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать названию события с указанным идентификатором');\r",
                  "    pm.expect(sourceComment.text).equal(target.comments[0].text, 'Текст комментария должен соответствовать тексту с указанным идентификатором');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/events?text=0&categories=0&paid=true&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&onlyAvailable=false&sort=EVENT_DATE&from=0&size=1000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events"
              ],
              "query": [
                {
                  "key": "text",
                  "value": "0",
                  "description": "текст для поиска в содержимом аннотации и подробном описании события"
                },
                {
                  "key": "categories",
                  "value": "0",
                  "description": "список идентификаторов категорий в которых будет вестись поиск"
                },
                {
                  "key": "paid",
                  "value": "true",
                  "description": "поиск только платных/бесплатных событий"
                },
                {
                  "key": "rangeStart",
                  "value": "2022-01-06%2013%3A30%3A38",
                  "description": "дата и время не раньше которых должно произойти событие"
                },
                {
                  "key": "rangeEnd",
                  "value": "2097-09-06%2013%3A30%3A38",
                  "description": "дата и время не позже которых должно произойти событие"
                },
                {
                  "key": "onlyAvailable",
                  "value": "false",
                  "description": "только события у которых не исчерпан лимит запросов на участие"
                },
                {
                  "key": "sort",
                  "value": "EVENT_DATE",
                  "description": "Вариант сортировки: по дате события или по количеству просмотров"
                },
                {
                  "key": "from",
                  "value": "0",
                  "description": "количество событий, которые нужно пропустить для формирования текущего набора"
                },
                {
                  "key": "size",
                  "value": "1000",
                  "description": "количество событий в наборе"
                }
              ]
            },
            "description": "Обратите внимание: \n- это публичный эндпоинт, соответственно в выдаче должны быть только опубликованные события\n- текстовый поиск (по аннотации и подробному описанию) должен быть без учета регистра букв\n- если в запросе не указан диапазон дат [rangeStart-rangeEnd], то нужно выгружать события, которые произойдут позже текущей даты и времени\n- информация о каждом событии должна включать в себя количество просмотров и количество уже одобренных заявок на участие\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
          },
          "response": []
        },
        {
          "name": "Получение подробной информации об опубликованном событии по его идентификатору",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));\r",
                  "        event = await api.publishEvent(event.id);\r",
                  "        comment = await api.addComment(user.id, event.id, rnd.getComment());\r",
                  "        pm.collectionVariables.set(\"eid\", event.id)\r",
                  "        pm.collectionVariables.set('response', event);\r",
                  "        pm.collectionVariables.set('responseComment', comment);\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            // выполняем наш скрипт\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = pm.collectionVariables.get('response');\r",
                  "const sourceComment = pm.collectionVariables.get('responseComment');\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, views, confirmedRequests, description, participantLimit, state, createdOn, publishedOn, location, requestModeration, comments\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('views');\r",
                  "pm.expect(target).to.have.property('confirmedRequests');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('publishedOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "pm.expect(target).to.have.property('comments');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(source.annotation).equal(target.annotation, 'Аннотация события должна соответствовать аннотации события с указанным идентификатором');\r",
                  "    pm.expect(source.category.id).equal(target.category.id, 'Категория события должна соответствовать категории события с указанным идентификатором');\r",
                  "    pm.expect(source.paid.toString()).equal(target.paid.toString(), 'Стоимость события должна соответствовать стоимости события с указанным идентификатором');\r",
                  "    pm.expect(source.eventDate).equal(target.eventDate, 'Дата проведения события должна соответствовать дате проведения события с указанным идентификатором');\r",
                  "    pm.expect(source.description).equal(target.description, 'Описание события должно соответствовать описанию события с указанным идентификатором');\r",
                  "    pm.expect(source.title).equal(target.title, 'Название события должно соответствовать названию события с указанным идентификатором');\r",
                  "    pm.expect(source.participantLimit.toString()).equal(target.participantLimit.toString(), 'Лимит участников события должен соответствовать лимиту участников события с указанным идентификатором');\r",
                  "    pm.expect(sourceComment.text).equal(target.comments[0].text, 'Текст комментария должен соответствовать тексту с указанным идентификатором');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/events/:id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "events",
                ":id"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{eid}}",
                  "description": "(Required) id события"
                }
              ]
            },
            "description": "Обратите внимание:\n- событие должно быть опубликовано\n- информация о событии должна включать в себя количество просмотров и количество подтвержденных запросов\n- информацию о том, что по этому эндпоинту был осуществлен и обработан запрос, нужно сохранить в сервисе статистики"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comment",
      "item": [
        {
          "name": "Добавление нового комментария",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    let comment;",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set('uid', user.id)",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        pm.collectionVariables.set('cid', category.id)",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "        event = await api.publishEvent(event.id);",
                  "        comment = rnd.getComment();",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "",
                  "    pm.request.body.update({",
                  "        mode: 'raw',",
                  "        raw: JSON.stringify(comment),",
                  "        options: { raw: { language: 'json' } }",
                  "    });",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(201);  ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = JSON.parse(pm.request.body.raw);",
                  "const target = pm.response.json();",
                  "",
                  "pm.test(\"Комментарий должен содержать поля: id, author, event, text, created, updated\", function () {",
                  "    pm.expect(target).to.have.property('id');",
                  "    pm.expect(target).to.have.property('author');",
                  "    pm.expect(target).to.have.property('event');",
                  "    pm.expect(target).to.have.property('text');",
                  "    pm.expect(target).to.have.property('created');",
                  "    pm.expect(target).to.have.property('updated');",
                  "});",
                  "",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                  "    pm.expect(target.id).to.not.to.be.null;",
                  "    pm.expect(target.text).equal(source.text, 'Текст должен соответствовать тексту в запросе');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "default"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "default"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "0",
                  "description": "(Required) id события",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}",
                  "description": "(Required) id текущего пользователя"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}",
                  "description": "(Required) id текущего события"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Изменение комментария пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    let comment;",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set('uid', user.id)",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        event = await api.publishEvent(event.id);",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                  "        comment.text = rnd.getWord(100);",
                  "        pm.collectionVariables.set('response', comment);",
                  "        pm.collectionVariables.set(\"cid\", comment.id)",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: comment,",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(200);  ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "default"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "default"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "0",
                  "description": "(Required) id события",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}",
                  "description": "(Required) id текущего пользователя"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}",
                  "description": "(Required) id текущего события"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}",
                  "description": "(Required) id текущего комментария"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Изменение комментария администратором",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    let comment;",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set('uid', user.id)",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        event = await api.publishEvent(event.id);",
                  "        pm.collectionVariables.set(\"eid\", event.id)",
                  "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                  "        comment.text = rnd.getWord(100);",
                  "        pm.collectionVariables.set('response', comment);",
                  "        pm.collectionVariables.set(\"cid\", comment.id)",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: comment,",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.have.status(200);  ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "default"
              },
              {
                "key": "Accept",
                "value": "application/json",
                "type": "default"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}"
            },
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":commentId"
              ],
              "query": [
                {
                  "key": "eventId",
                  "value": "0",
                  "description": "(Required) id события",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление комментария администратором",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    let comment;",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        event = await api.publishEvent(event.id);",
                  "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                  "        const foundedComment = await api.findComment(comment.id);",
                  "        pm.collectionVariables.set(\"cid\", comment.id);",
                  "        pm.collectionVariables.set(\"response\", foundedComment)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "const source = pm.collectionVariables.get('response');",
                  "const commentId = pm.collectionVariables.get('cid');",
                  "",
                  "pm.test(\"Комментарий должен быть найден до удаления\", function () {",
                  "    pm.expect(source.id).equal(commentId, 'Идентификтор комментария должен совпадать с удаляемым');",
                  "});",
                  "",
                  "pm.sendRequest({",
                  "            url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/\" + commentId,",
                  "            method: 'GET',",
                  "        }, (error, response) => {",
                  "            pm.test(\"Комментарий не должен быть найден после удаления\", function () {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });",
                  "        });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "default"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Удаление комментария пользователем",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    let comment;",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set(\"uid\", user.id);",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        event = await api.publishEvent(event.id);",
                  "        pm.collectionVariables.set(\"eid\", event.id);",
                  "        const comment = await api.addComment(user.id, event.id, rnd.getComment());",
                  "        const foundedComment = await api.findComment(comment.id);",
                  "        pm.collectionVariables.set(\"cid\", comment.id);",
                  "        pm.collectionVariables.set(\"response\", foundedComment)",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "const source = pm.collectionVariables.get('response');",
                  "const commentId = pm.collectionVariables.get('cid');",
                  "",
                  "pm.test(\"Комментарий должен быть найден до удаления\", function () {",
                  "    pm.expect(source.id).equal(commentId, 'Идентификтор комментария должен совпадать с удаляемым');",
                  "});",
                  "",
                  "pm.sendRequest({",
                  "            url: pm.collectionVariables.get(\"baseUrl\") + \"/comments/\" + commentId,",
                  "            method: 'GET',",
                  "        }, (error, response) => {",
                  "            pm.test(\"Комментарий не должен быть найден после удаления\", function () {",
                  "                pm.expect(response.code).to.eql(404);",
                  "            });",
                  "        });"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "default"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events",
                ":eventId",
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventId",
                  "value": "{{eid}}"
                },
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение комментариев администратором с возможностью фильтрации",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set('uid', user.id);",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        event = await api.publishEvent(event.id);",
                  "        pm.collectionVariables.set('eid', event.id);",
                  "        comment = await api.addComment(user.id, event.id, rnd.getComment());",
                  "        pm.request.removeQueryParams(['text', 'categories', 'paid']);",
                  "        pm.request.addQueryParams([`text=` + event.annotation, 'categories=' + category.id, 'paid=' + event.paid]);",
                  "        pm.collectionVariables.set('response', comment);",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            // выполняем наш скрипт",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.be.ok;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = pm.collectionVariables.get('response');",
                  "const target = pm.response.json()[0];",
                  "",
                  "pm.test(\"Комментарий должен содержать поля: id, author, event, text, created, updated\", function () {",
                  "pm.expect(target).to.have.property('id');",
                  "pm.expect(target).to.have.property('author');",
                  "pm.expect(target).to.have.property('event');",
                  "pm.expect(target).to.have.property('text');",
                  "pm.expect(target).to.have.property('created');",
                  "pm.expect(target).to.have.property('updated');",
                  "});",
                  "",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                  "    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария с указанным идентификатором');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "default"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/comments?userIds={{uid}}&eventIds={{eid}}&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "comments"
              ],
              "query": [
                {
                  "key": "userIds",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventIds",
                  "value": "{{eid}}"
                },
                {
                  "key": "rangeStart",
                  "value": "2022-01-06%2013%3A30%3A38"
                },
                {
                  "key": "rangeEnd",
                  "value": "2097-09-06%2013%3A30%3A38"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение комментариев пользователем с возможностью фильтрации",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        pm.collectionVariables.set('uid', user.id);",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        event = await api.publishEvent(event.id);",
                  "        pm.collectionVariables.set('eid', event.id);",
                  "        comment = await api.addComment(user.id, event.id, rnd.getComment());",
                  "        pm.request.removeQueryParams(['text', 'categories', 'paid']);",
                  "        pm.request.addQueryParams([`text=` + event.annotation, 'categories=' + category.id, 'paid=' + event.paid]);",
                  "        pm.collectionVariables.set('response', comment);",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            // выполняем наш скрипт",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.be.ok;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = pm.collectionVariables.get('response');",
                  "const target = pm.response.json()[0];",
                  "",
                  "pm.test(\"Комментарий должен содержать поля: id, author, event, text, created, updated\", function () {",
                  "pm.expect(target).to.have.property('id');",
                  "pm.expect(target).to.have.property('author');",
                  "pm.expect(target).to.have.property('event');",
                  "pm.expect(target).to.have.property('text');",
                  "pm.expect(target).to.have.property('created');",
                  "pm.expect(target).to.have.property('updated');",
                  "});",
                  "",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                  "    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария с указанным идентификатором');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "default"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments?userIds={{uid}}&eventIds={{eid}}&rangeStart=2022-01-06%2013%3A30%3A38&rangeEnd=2097-09-06%2013%3A30%3A38&from=0&size=1000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments"
              ],
              "query": [
                {
                  "key": "userIds",
                  "value": "{{uid}}"
                },
                {
                  "key": "eventIds",
                  "value": "{{eid}}"
                },
                {
                  "key": "rangeStart",
                  "value": "2022-01-06%2013%3A30%3A38"
                },
                {
                  "key": "rangeEnd",
                  "value": "2097-09-06%2013%3A30%3A38"
                },
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Получение комментария по Id",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        let event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        event = await api.publishEvent(event.id);",
                  "        comment = await api.addComment(user.id, event.id, rnd.getComment());",
                  "        pm.collectionVariables.set('cid', comment.id);",
                  "        pm.collectionVariables.set('response', comment);",
                  "    } catch(err) {",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => ",
                  "    {",
                  "        try {",
                  "            // выполняем наш скрипт",
                  "            await main();",
                  "        } catch (e) {",
                  "            console.error(e);",
                  "        } finally {",
                  "            clearInterval(interval);",
                  "        }",
                  "    },  ",
                  "    100 ",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
                  "    pm.response.to.be.ok;    ",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const source = pm.collectionVariables.get('response');",
                  "const target = pm.response.json();",
                  "",
                  "pm.test(\"Комментарий должен содержать поля: id, author, event, text, created, updated\", function () {",
                  "pm.expect(target).to.have.property('id');",
                  "pm.expect(target).to.have.property('author');",
                  "pm.expect(target).to.have.property('event');",
                  "pm.expect(target).to.have.property('text');",
                  "pm.expect(target).to.have.property('created');",
                  "pm.expect(target).to.have.property('updated');",
                  "});",
                  "",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
                  "    pm.expect(source.text).equal(target.text, 'Текст комментария должен соответствовать тексту комментария с указанным идентификатором');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json",
                "type": "default"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/:commentId",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "comments",
                ":commentId"
              ],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{cid}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async addComment(userId, eventId, comment, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events/\" + eventId + \"/comments\", comment, \"Ошибка при добавлении нового комментария: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async findComment(commentId, verbose=null) {",
          "        return this.get('/comments/' + commentId, null, \"Ошибка при поиске комментария по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "",
          "                    resolve(response.json());",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "    getComment() {",
          "        return {",
          "            text: pm.variables.replaceIn('{{$randomLoremParagraphs}}')",
          "        }",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 98,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": {
        "id": 35,
        "title": "Sed at rerum quo incidunt architecto ut.",
        "pinned": false,
        "events": []
      }
    },
    {
      "key": "uid",
      "value": 126,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 102,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 35,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 11,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": 0
    },
    {
      "key": "responseArr",
      "value": [
        {
          "id": 9,
          "title": "Dicta ut non.",
          "pinned": false,
          "events": []
        },
        {
          "id": 10,
          "title": "Exercitationem natus rerum et qui necessitatibus e",
          "pinned": false,
          "events": []
        },
        {
          "id": 11,
          "title": "Cumque illum minus quibusdam eveniet ut nulla quos",
          "pinned": false,
          "events": []
        },
        {
          "id": 12,
          "title": "Quia pariatur ex sit.",
          "pinned": false,
          "events": []
        },
        {
          "id": 13,
          "title": "Tempore eos a ipsa.",
          "pinned": false,
          "events": []
        },
        {
          "id": 14,
          "title": "Voluptatibus aspernatur modi repellat facere.",
          "pinned": false,
          "events": []
        },
        {
          "id": 15,
          "title": "Quia qui sapiente totam.",
          "pinned": false,
          "events": []
        },
        {
          "id": 16,
          "title": "Consequatur est praesentium nulla aut ut porro dol",
          "pinned": false,
          "events": []
        },
        {
          "id": 17,
          "title": "Est earum expedita veritatis labore harum.",
          "pinned": false,
          "events": []
        },
        {
          "id": 18,
          "title": "Quo et incidunt alias occaecati.",
          "pinned": false,
          "events": []
        }
      ]
    },
    {
      "key": "source1",
      "value": {
        "id": 59,
        "name": "Miss Allan Lynch",
        "email": "Branson4@yahoo.com"
      }
    },
    {
      "key": "source2",
      "value": {
        "id": 60,
        "name": "Domingo Fahey V",
        "email": "Ewell5@gmail.com"
      }
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": [
        {
          "id": 1,
          "title": "Et quidem est commodi reprehenderit velit qui dolo",
          "pinned": false,
          "events": []
        },
        {
          "id": 2,
          "title": "Mollitia est quibusdam sunt quibusdam aspernatur c",
          "pinned": false,
          "events": [
            {
              "id": 73,
              "category": {
                "id": 72,
                "name": "bus51"
              },
              "initiator": {
                "id": 80,
                "name": "Carlos Wolf"
              },
              "confirmedRequests": 0,
              "views": 0,
              "paid": true,
              "annotation": "Corrupti ut et est commodi. In sunt aut et. Quia exercitationem molestiae porro sequi cum velit dolor. Magni dolore et.",
              "title": "Facere adipisci minus rerum qui.",
              "eventDate": "2023-08-14 17:18:09"
            }
          ]
        },
        {
          "id": 3,
          "title": "Fugiat ipsa qui ipsum sunt quis explicabo providen",
          "pinned": false,
          "events": [
            {
              "id": 74,
              "category": {
                "id": 76,
                "name": "invoice7"
              },
              "initiator": {
                "id": 84,
                "name": "Orville Cartwright"
              },
              "confirmedRequests": 0,
              "views": 0,
              "paid": false,
              "annotation": "Quam est aut magnam fugiat repudiandae. Deserunt consequuntur fuga. Ad tenetur tempora voluptatem dolorem. Fugit et aliquam totam ducimus veritatis enim harum autem.",
              "title": "Molestias animi omnis dolor occaecati commodi sit et nemo quam.",
              "eventDate": "2023-08-14 17:18:10"
            },
            {
              "id": 75,
              "category": {
                "id": 76,
                "name": "invoice7"
              },
              "initiator": {
                "id": 84,
                "name": "Orville Cartwright"
              },
              "confirmedRequests": 0,
              "views": 0,
              "paid": false,
              "annotation": "Beatae voluptatem aut est delectus assumenda repellendus voluptatem maxime velit. Est vel officia consequatur ducimus. Totam libero et dolore ea iusto iste aut qui omnis.",
              "title": "Magni ex explicabo consequuntur sequi nihil quia nisi voluptatibus.",
              "eventDate": "2023-08-14 17:18:10"
            }
          ]
        },
        {
          "id": 6,
          "title": "eZQJBhDKSvt1w2zEKAdwg9olwMR1urWIh1XgXMJhZUejhhjzym",
          "pinned": false,
          "events": []
        },
        {
          "id": 7,
          "title": "Quis veritatis deleniti ad et non aut ex amet.",
          "pinned": false,
          "events": []
        },
        {
          "id": 8,
          "title": "iJ1dL3CZh5S83aYMqE1glGVhHoGZHkpuqgblNkaj8TQ7QvDusa",
          "pinned": false,
          "events": []
        },
        {
          "id": 9,
          "title": "Dicta ut non.",
          "pinned": false,
          "events": []
        },
        {
          "id": 10,
          "title": "Exercitationem natus rerum et qui necessitatibus e",
          "pinned": false,
          "events": []
        },
        {
          "id": 11,
          "title": "Cumque illum minus quibusdam eveniet ut nulla quos",
          "pinned": false,
          "events": []
        },
        {
          "id": 12,
          "title": "Quia pariatur ex sit.",
          "pinned": false,
          "events": []
        }
      ]
    },
    {
      "key": "cid",
      "value": ""
    },
    {
      "key": "responseComment",
      "value": ""
    }
  ]
}